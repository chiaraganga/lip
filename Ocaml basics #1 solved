(* 1. massimo numero val max_nat : int -> int -> int*)
let max_nat a b = if a >0 && b >0 then (if a<b then b else a) else failwith "i numeri non sono naturali";;

(* 2. valore assoluto val f : int -> int*)

let f1 x = if x < 0 then x * -1 else x;;

(* 3. from type to function * val f : (int -> int) -> int ) *)

let f2 x = if (x 1) > 0 then 2 else 4;;
let g1 x = x+1;;

(* 4. find a function *)

let rec f3 x y = 
  if x y = 0 then f3 x (y+1)
  else x y ;;

let pippo n = 3;;

(* 5. Highest card wins val win : card -> card -> bool 
   if neither the player nor the dealer have the Joker, then the one with the highest card wins;
   if both the player and the dealer have the Joker, then the dealer wins;
   otherwise, the one with the Joker wins.  *)

type card = Joker | Val of int;;

let win1 p1 p2 = match (p1,p2) with
    (_, Joker) -> false
  | (Joker, _) -> true
  | (Val n1, Val n2) when(n1<0 || n1>10 || n2<0 || n2>10) -> failwith "valori non ammessi"
  | (Val n1, Val n2) -> (n1 > n2) ;;

(* 6. from type to function val f : (int -> int) -> (int -> int)  va a vedere che operazione stiamo facendo  
la freccia associa a destra, sono implicite *)

let f4 g a = g (a+1) +1 ;;

(* 7. Even and odd val is_even : int -> bool 
consider a simple game between two players, say A and B, with the following rules:

    A and B choose a number between 1 and 5 (any other number is considered incorrect);
   the winner is A if she played a correct number, and the sum of the two numbers is even;
   the winner is B if he played a correct number, and the sum of the two numbers is odd;
   if one player has chosen a correct number and the other has not, then the first one wins;
   if both players have chosen an incorrect number, then no one wins.
   Write a function to determine the winner of the game, with type:

     val win : int -> int -> int
   such that win a b evaluates to:

   1, if the first player wins (i.e., the one who played the number a);
   -1, if the second player wins;
   0, if no one wins. 

== e = operatori di confronto ma uno dei due è un controllo sintattico e l'eltro è semantico*)

let is_even x = x mod 2 = 0;;
let is_correct n = (n>=1 && n <=5);;

let win2 a b = match (a,b) with
    (a,b) when (is_correct a && not (is_correct b)) -> 1
  | (a,b) when (not (is_correct a) && is_correct b) -> -1 
  | (a,b) when (not (is_correct a) && (not (is_correct b))) -> 0
  | (a,b) when (is_even (a+b) ) -> 1
  | _ -> -1 
;;

(* 9. Reverse list val rev : 'a list -> 'a list 
   provare a farla con la fold
*)

let rec rev lst = match lst with
    [] -> [] 
  | h :: t -> rev t @ [h] ;;


(*12 Consider the following type to represent student grades:

type grade = Val of int | CumLaude;;
Write functions with the following types:

val is_valid : grade -> bool = <fun>
which evaluates to true iff the grade is included between 18 and 30, or it is CumLaude.

val int_of_grade : grade -> int = <fun>
which transforms a valid grade into an integer (where CumLaude counts for 32), and fails if the grade is not valid.

val avg : grade list -> float = <fun> prende una lista e rende un float
which computes the average of a list of valid grades (it fails if some grade in the list is not valid). *)


type grade = Val of int | CumLaude;;

let is_valid v = match v with
    Val n -> (n >= 18 && n<=30)
  | CumLaude -> true;;

let int_of_grade v = if ( not(is_valid v )) then failwith "errore" 
  else ( 
    match v with
    | Val n -> n
    | CumLaude -> 32
  );;

let avg l = let somma = List.fold_right (fun a b -> int_of_grade a + b) l 0
  in (float_of_int somma) /. float_of_int (List.length l);;
   

(*10 minimo di una funzione type 'a option = Some of 'a | None 
  
val minfun : (int -> 'a) -> int -> int -> 'a option
quando a è maggiore di b *)

type 'a option = Some of 'a | None;; 

let minfun f a b = 
  if a > b then None 
  else ( 
    let rec minfunrec f a b = if a = b then f a 
      else min (f a) (minfunrec f (a+1) b)
    in Some ( minfunrec f a b));;
